server.c

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<string.h>
#include<unistd.h> 
#include<netinet/in.h> 

#define MAX 24

int startup(char* ip,int port)
{
	//创建套接字文件描述符
	int sock=socket(AF_INET,SOCK_STREAM,0);
	if(sock<0)
	{
		perror("socket");
		exit(2);
	}
	//填充结构体进行绑定
	struct sockaddr_in server;
	server.sin_family=AF_INET;
	server.sin_addr.s_addr=inet_addr(ip);
	server.sin_port=htons(port);

	if(bind(sock,(struct sockaddr*)&server,sizeof(server))<0)
	{
		perror("bind");
		exit(3);
	}
	//设置套接字为监听状态
	if(listen(sock,5)<0)
	{
		perror("listen");
		exit(4);
	}
	return sock;
}

void service(int sock,char* ip,int port)
{
	char buf[MAX];
	while(1)
	{
		ssize_t s=read(sock,buf,sizeof(buf)-1);
		if(s>0)
		{
			buf[s]=0;
			//某主机下的某个进程说了啥
			printf("[%s:%d] say# %s\n",ip,port,buf);
			//将数据写回去
			write(sock,buf,strlen(buf));
		}else if(s==0)//客户端关闭了
		{
			printf("client [%s:%d] quit!\n",ip,port);
			break;
		}
		else
		{
			perror("read");
			break;
		}
	}
}

int main(int argc,char* argv[])
{
	if(argc!=3)
	{
		printf("%s [ip] [port]\n",argv[0]);
		return 1;
	}
	//创建监听套接字
	int listen_sock=startup(argv[1],atoi(argv[2]));

	struct sockaddr_in client;
	socklen_t len=sizeof(client);
	char ipbuf[128];
	while(1)
	{
		ipbuf[0]=0;//数组初始化
		int new_sock=accept(listen_sock,(struct sockaddr*)&client,&len);
		if(new_sock<0)
		{
			perror("accept");
			continue;
		}
		inet_ntop(AF_INET,&client.sin_addr,ipbuf,sizeof(ipbuf));
		int port=ntohs(client.sin_port);
		printf("get a connect:ip is: %s,port is: %d\n",ipbuf,port);

		service(new_sock,ipbuf,port);
		close(new_sock);
	}
	close(listen_sock);
	return 0;
}
client.c

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<arpa/inet.h>

#define MAX 128

int main(int argc,char* argv[])
{
	if(argc!=3)
	{
		printf("Enter %s [ip] [port]",argv[0]);
		return 1;
	}

	int sock=socket(AF_INET,SOCK_STREAM,0);
	if(sock<0)
	{
		perror("socket");
		return 2;
	}

	struct sockaddr_in server;
	server.sin_family=AF_INET;
	server.sin_addr.s_addr=inet_addr(argv[1]);
	server.sin_port=htons(atoi(argv[2]));

	int ret=connect(sock,(struct sockaddr*)&server,sizeof(server));
	if(ret<0)
	{
		perror("connect");
		return 3;
	}

	char buf[MAX];
	while(1)
	{
		printf("please enter:");
		fflush(stdout);
		ssize_t s=read(0,buf,sizeof(buf)-1);
		if(s>0)
		{
			//read会将回车键读进去
			buf[s-1]=0;
			if(strcmp("quit",buf)==0)
			{
				printf("client quit!\n");
				break;
			}
			write(sock,buf,strlen(buf));
			s=read(sock,buf,sizeof(buf)-1);
			buf[s]=0;
			printf("server echo:%s\n",buf);
		}
	}
	close(sock);
	return 0;
}
